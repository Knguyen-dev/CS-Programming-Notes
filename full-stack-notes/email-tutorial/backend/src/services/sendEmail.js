/*

+ SMTP (Simple Mail Transfer Protocol): 
A protocol used to send emails across the Internet. It defines the rules and standards for sending emails to clients 
and servers. So when you send an email, your email client (like Gmail or Outlook) contacts an SMTP server. Then this 
server processes your email and forwards it to the recipient's email server where it can be accessed by the recipient.

+ What is an SMTP server
A server that uses the SMTP protocol to send, receive, and relay emails. 

- Outgoing Mail server: Handles sending emails.
- Incoming mail server: Can receive emails (thoguh this is often handled by other protocols).
- Relays: If the recipient's email server isn't directly reachable, the SMTP server forwards the 
  email to another SMTP server until it reaches its destination.




+ What is Nodemailer: 
A package for Node.js applications to send emails. It allows us toconnect to various email service providers, and handle the 
sending of emails. 

- transporter: The configuration of Nodemailer. Nodemailer works by getting the credentials of your email account
  and then programmatically sending emails via that account. So here we give it a bunch of configurations
  and our credentials:

  1. host: Hostname or IP address of the SMTP server you want to connect to. For example, if you're sending 
    the email via a 'gmail' account, you'd use 'smtp.gmail.com'. This is because this is hte server your email 
    client, which is Nodemailer in this case, will connect to in order to send emails.


  2. service: The email service you want to use. So things such as 'Gmail', 'Yahoo', or 'Outlook365'.
    This is used to automatically configure the SMTPsettings for common email providers, instead of manually
    setting 'HOST', 'PORT', and other settings for SMTP gmail. So using service: "gmail" will automatically
    set stuff like 'host', port, and other things.
  
  NOTE: It should be noted that if you use the service option you typically don't need to specify
  the host, service, port, and secure options.

  3. port: The port to connect to on the SMTP server. 

  NOTE: Port 465 is used for SMTPS (SMTP secure), which means it'll use SSL for encrypting the 
    connection.


  4. secure: Whether or not to use a secure connection. With SSL (true) and TLS (false)

  5. Object containing authentication details for the SMTP server. Here we put the email address and password 
    of the sender.

  NOTE: For security reasons, if you're using Gmail, you might need to use an App Password instead of your regular email password if two-factor authentication is enabled.
  Then after creating a transporter instance, we use that transporter to send emails withthe sendMail method.

+ Integration with Gmail:

First let's talk about 'less secure app access'. Google explains some apps and devices use less secure sign-in technology. In the past Google allowed, less secure 
apps to interact with your google account. Of course you could it turn it off for some apps you didn't trust, and so for those apps they wouldn't be able to do 
sign-in stuff with your Google Account. In the present, Google has disabled this feature and increased security, meaning that those less secure apps cannot sign in
on your behalf anymore. So what do we do? We have to create an 'app password'

- How to create an app password
1. Go to https://myaccount.google.com/security
2. Enable 2FA. After enabling, click on the option to create an app password for your email, or search for 'app password'.
  Good, now with an app password, it grants complete access to your Google Account.
3. Now assign that app password (16 letter password generated by Google) , to AUTH_PASS

- NOTE About the frontend
*/

const nodemailer = require("nodemailer");

const transporter = nodemailer.createTransport({
	service: process.env.SERVICE,
	auth: {
		user: process.env.AUTH_EMAIL,
		pass: process.env.AUTH_PASS,
	},
});

const sendEmail = async (email, subject, text) => {
	try {
		await transporter.sendMail({
			from: process.env.AUTH_EMAIL,
			to: email,
			subject: subject,
			text: text,
		});

		console.log("Email sent successfully!");
	} catch (err) {
		console.log("Email not sent!");
		console.log("Error: ", err);
	}
};

transporter.verify((error) => {
	if (error) {
		console.log(error);
	} else {
		console.log("Email system ready to send messages!");
	}
});

module.exports = sendEmail;
